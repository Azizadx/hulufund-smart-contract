{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contributeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "daoBalance",
          "type": "uint256"
        }
      ],
      "name": "ContributionEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "equbAddress",
          "type": "address"
        }
      ],
      "name": "MemberRemovedEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "NextContributionTime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "equbAddress",
          "type": "address"
        }
      ],
      "name": "SkipContributionEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "Success",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "equbAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "contribution",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "contributions",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_profileUrl",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_email",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_contributionAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_contributionDate",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_website",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_twitterUrl",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_facebookUrl",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_telegramUrl",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        }
      ],
      "name": "createEqub",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "equbAddress",
          "type": "address"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "_equbAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_profileUrl",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_email",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_contributionAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_contributionDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_equbBalance",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_website",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_twitterUrl",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_facebookUrl",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_telegramUrl",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "getPoolByMember",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "equbAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "poolName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "poolImage",
              "type": "string"
            }
          ],
          "internalType": "struct Equb.PoolData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "equbAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "getRemainingSkipCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "equbAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "hasContributed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfPools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "address",
          "name": "equbAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "profileUrl",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "email",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "contributionAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "contributionDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "equbBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "contributionSkipCount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "website",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "twitterUrl",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "facebookUrl",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "telegramUrl",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2fc67279f30ea70fa7745ad3a00a3ceb084859af053ef8dd42ec372d0052274e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "2302511",
    "logsBloom": "0x
    "blockHash": "0x8da08f05f3ce2446953328f3cae70309e848847f43c297f23b8a9e6af335e991",
    "transactionHash": "0x2fc67279f30ea70fa7745ad3a00a3ceb084859af053ef8dd42ec372d0052274e",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "2302511",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "db0e13c7808d6e036b80318d26fcda29",
  "metadata": "{\"compiler\":{\"version\":\"0.8.5+commit.a4f2e591\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contributeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daoBalance\",\"type\":\"uint256\"}],\"name\":\"ContributionEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"equbAddress\",\"type\":\"address\"}],\"name\":\"MemberRemovedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"NextContributionTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"equbAddress\",\"type\":\"address\"}],\"name\":\"SkipContributionEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Success\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"equbAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"contribution\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_profileUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_contributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_contributionDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_twitterUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_facebookUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_telegramUrl\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"}],\"name\":\"createEqub\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"equbAddress\",\"type\":\"address\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_equbAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_profileUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_contributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_contributionDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_equbBalance\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_twitterUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_facebookUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_telegramUrl\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"getPoolByMember\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"equbAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolImage\",\"type\":\"string\"}],\"internalType\":\"struct Equb.PoolData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"equbAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"getRemainingSkipCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"equbAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"hasContributed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"equbAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"profileUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"contributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"equbBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionSkipCount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"twitterUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"facebookUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"telegramUrl\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Equb.sol\":\"Equb\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/BokkyPooBahsDateTimeContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.00 - Contract Instance\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018.\\n//\\n// GNU Lesser General Public License 3.0\\n// https://www.gnu.org/licenses/lgpl-3.0.en.html\\n// ----------------------------------------------------------------------------\\n\\nimport \\\"./BokkyPooBahsDateTimeLibrary.sol\\\";\\n\\ncontract BokkyPooBahsDateTimeContract {\\n    uint public constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint public constant SECONDS_PER_HOUR = 60 * 60;\\n    uint public constant SECONDS_PER_MINUTE = 60;\\n    int public constant OFFSET19700101 = 2440588;\\n\\n    uint public constant DOW_MON = 1;\\n    uint public constant DOW_TUE = 2;\\n    uint public constant DOW_WED = 3;\\n    uint public constant DOW_THU = 4;\\n    uint public constant DOW_FRI = 5;\\n    uint public constant DOW_SAT = 6;\\n    uint public constant DOW_SUN = 7;\\n\\n    function _now() public view returns (uint timestamp) {\\n        timestamp = block.timestamp;\\n    }\\n\\n    function _nowDateTime()\\n        public\\n        view\\n        returns (\\n            uint year,\\n            uint month,\\n            uint day,\\n            uint hour,\\n            uint minute,\\n            uint second\\n        )\\n    {\\n        (year, month, day, hour, minute, second) = BokkyPooBahsDateTimeLibrary\\n            .timestampToDateTime(block.timestamp);\\n    }\\n\\n    function _daysFromDate(\\n        uint year,\\n        uint month,\\n        uint day\\n    ) public pure returns (uint _days) {\\n        return BokkyPooBahsDateTimeLibrary._daysFromDate(year, month, day);\\n    }\\n\\n    function _daysToDate(\\n        uint _days\\n    ) public pure returns (uint year, uint month, uint day) {\\n        return BokkyPooBahsDateTimeLibrary._daysToDate(_days);\\n    }\\n\\n    function timestampFromDate(\\n        uint year,\\n        uint month,\\n        uint day\\n    ) public pure returns (uint timestamp) {\\n        return BokkyPooBahsDateTimeLibrary.timestampFromDate(year, month, day);\\n    }\\n\\n    function timestampFromDateTime(\\n        uint year,\\n        uint month,\\n        uint day,\\n        uint hour,\\n        uint minute,\\n        uint second\\n    ) public pure returns (uint timestamp) {\\n        return\\n            BokkyPooBahsDateTimeLibrary.timestampFromDateTime(\\n                year,\\n                month,\\n                day,\\n                hour,\\n                minute,\\n                second\\n            );\\n    }\\n\\n    function timestampToDate(\\n        uint timestamp\\n    ) public pure returns (uint year, uint month, uint day) {\\n        (year, month, day) = BokkyPooBahsDateTimeLibrary.timestampToDate(\\n            timestamp\\n        );\\n    }\\n\\n    function timestampToDateTime(\\n        uint timestamp\\n    )\\n        public\\n        pure\\n        returns (\\n            uint year,\\n            uint month,\\n            uint day,\\n            uint hour,\\n            uint minute,\\n            uint second\\n        )\\n    {\\n        (year, month, day, hour, minute, second) = BokkyPooBahsDateTimeLibrary\\n            .timestampToDateTime(timestamp);\\n    }\\n\\n    function isValidDate(\\n        uint year,\\n        uint month,\\n        uint day\\n    ) public pure returns (bool valid) {\\n        valid = BokkyPooBahsDateTimeLibrary.isValidDate(year, month, day);\\n    }\\n\\n    function isValidDateTime(\\n        uint year,\\n        uint month,\\n        uint day,\\n        uint hour,\\n        uint minute,\\n        uint second\\n    ) public pure returns (bool valid) {\\n        valid = BokkyPooBahsDateTimeLibrary.isValidDateTime(\\n            year,\\n            month,\\n            day,\\n            hour,\\n            minute,\\n            second\\n        );\\n    }\\n\\n    function isLeapYear(uint timestamp) public pure returns (bool leapYear) {\\n        leapYear = BokkyPooBahsDateTimeLibrary.isLeapYear(timestamp);\\n    }\\n\\n    function _isLeapYear(uint year) public pure returns (bool leapYear) {\\n        leapYear = BokkyPooBahsDateTimeLibrary._isLeapYear(year);\\n    }\\n\\n    function isWeekDay(uint timestamp) public pure returns (bool weekDay) {\\n        weekDay = BokkyPooBahsDateTimeLibrary.isWeekDay(timestamp);\\n    }\\n\\n    function isWeekEnd(uint timestamp) public pure returns (bool weekEnd) {\\n        weekEnd = BokkyPooBahsDateTimeLibrary.isWeekEnd(timestamp);\\n    }\\n\\n    function getDaysInMonth(\\n        uint timestamp\\n    ) public pure returns (uint daysInMonth) {\\n        daysInMonth = BokkyPooBahsDateTimeLibrary.getDaysInMonth(timestamp);\\n    }\\n\\n    function _getDaysInMonth(\\n        uint year,\\n        uint month\\n    ) public pure returns (uint daysInMonth) {\\n        daysInMonth = BokkyPooBahsDateTimeLibrary._getDaysInMonth(year, month);\\n    }\\n\\n    function getDayOfWeek(uint timestamp) public pure returns (uint dayOfWeek) {\\n        dayOfWeek = BokkyPooBahsDateTimeLibrary.getDayOfWeek(timestamp);\\n    }\\n\\n    function getYear(uint timestamp) public pure returns (uint year) {\\n        year = BokkyPooBahsDateTimeLibrary.getYear(timestamp);\\n    }\\n\\n    function getMonth(uint timestamp) public pure returns (uint month) {\\n        month = BokkyPooBahsDateTimeLibrary.getMonth(timestamp);\\n    }\\n\\n    function getDay(uint timestamp) public pure returns (uint day) {\\n        day = BokkyPooBahsDateTimeLibrary.getDay(timestamp);\\n    }\\n\\n    function getHour(uint timestamp) public pure returns (uint hour) {\\n        hour = BokkyPooBahsDateTimeLibrary.getHour(timestamp);\\n    }\\n\\n    function getMinute(uint timestamp) public pure returns (uint minute) {\\n        minute = BokkyPooBahsDateTimeLibrary.getMinute(timestamp);\\n    }\\n\\n    function getSecond(uint timestamp) public pure returns (uint second) {\\n        second = BokkyPooBahsDateTimeLibrary.getSecond(timestamp);\\n    }\\n\\n    function addYears(\\n        uint timestamp,\\n        uint _years\\n    ) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addYears(timestamp, _years);\\n    }\\n\\n    function addMonths(\\n        uint timestamp,\\n        uint _months\\n    ) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addMonths(\\n            timestamp,\\n            _months\\n        );\\n    }\\n\\n    function addDays(\\n        uint timestamp,\\n        uint _days\\n    ) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addDays(timestamp, _days);\\n    }\\n\\n    function addHours(\\n        uint timestamp,\\n        uint _hours\\n    ) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addHours(timestamp, _hours);\\n    }\\n\\n    function addMinutes(\\n        uint timestamp,\\n        uint _minutes\\n    ) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addMinutes(\\n            timestamp,\\n            _minutes\\n        );\\n    }\\n\\n    function addSeconds(\\n        uint timestamp,\\n        uint _seconds\\n    ) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.addSeconds(\\n            timestamp,\\n            _seconds\\n        );\\n    }\\n\\n    function subYears(\\n        uint timestamp,\\n        uint _years\\n    ) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subYears(timestamp, _years);\\n    }\\n\\n    function subMonths(\\n        uint timestamp,\\n        uint _months\\n    ) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subMonths(\\n            timestamp,\\n            _months\\n        );\\n    }\\n\\n    function subDays(\\n        uint timestamp,\\n        uint _days\\n    ) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subDays(timestamp, _days);\\n    }\\n\\n    function subHours(\\n        uint timestamp,\\n        uint _hours\\n    ) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subHours(timestamp, _hours);\\n    }\\n\\n    function subMinutes(\\n        uint timestamp,\\n        uint _minutes\\n    ) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subMinutes(\\n            timestamp,\\n            _minutes\\n        );\\n    }\\n\\n    function subSeconds(\\n        uint timestamp,\\n        uint _seconds\\n    ) public pure returns (uint newTimestamp) {\\n        newTimestamp = BokkyPooBahsDateTimeLibrary.subSeconds(\\n            timestamp,\\n            _seconds\\n        );\\n    }\\n\\n    function diffYears(\\n        uint fromTimestamp,\\n        uint toTimestamp\\n    ) public pure returns (uint _years) {\\n        _years = BokkyPooBahsDateTimeLibrary.diffYears(\\n            fromTimestamp,\\n            toTimestamp\\n        );\\n    }\\n\\n    function diffMonths(\\n        uint fromTimestamp,\\n        uint toTimestamp\\n    ) public pure returns (uint _months) {\\n        _months = BokkyPooBahsDateTimeLibrary.diffMonths(\\n            fromTimestamp,\\n            toTimestamp\\n        );\\n    }\\n\\n    function diffDays(\\n        uint fromTimestamp,\\n        uint toTimestamp\\n    ) public pure returns (uint _days) {\\n        _days = BokkyPooBahsDateTimeLibrary.diffDays(\\n            fromTimestamp,\\n            toTimestamp\\n        );\\n    }\\n\\n    function diffHours(\\n        uint fromTimestamp,\\n        uint toTimestamp\\n    ) public pure returns (uint _hours) {\\n        _hours = BokkyPooBahsDateTimeLibrary.diffHours(\\n            fromTimestamp,\\n            toTimestamp\\n        );\\n    }\\n\\n    function diffMinutes(\\n        uint fromTimestamp,\\n        uint toTimestamp\\n    ) public pure returns (uint _minutes) {\\n        _minutes = BokkyPooBahsDateTimeLibrary.diffMinutes(\\n            fromTimestamp,\\n            toTimestamp\\n        );\\n    }\\n\\n    function diffSeconds(\\n        uint fromTimestamp,\\n        uint toTimestamp\\n    ) public pure returns (uint _seconds) {\\n        _seconds = BokkyPooBahsDateTimeLibrary.diffSeconds(\\n            fromTimestamp,\\n            toTimestamp\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7784d565356d2b757b9c6fa90a7667ccc1783465633b0fc6d26e33f088c9b72c\",\"license\":\"MIT\"},\"contracts/BokkyPooBahsDateTimeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsDateTimeLibrary {\\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint constant SECONDS_PER_HOUR = 60 * 60;\\n    uint constant SECONDS_PER_MINUTE = 60;\\n    int constant OFFSET19700101 = 2440588;\\n\\n    uint constant DOW_MON = 1;\\n    uint constant DOW_TUE = 2;\\n    uint constant DOW_WED = 3;\\n    uint constant DOW_THU = 4;\\n    uint constant DOW_FRI = 5;\\n    uint constant DOW_SAT = 6;\\n    uint constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   https://aa.usno.navy.mil/faq/JD_formula.html\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(\\n        uint year,\\n        uint month,\\n        uint day\\n    ) internal pure returns (uint _days) {\\n        require(year >= 1970);\\n        int _year = int(year);\\n        int _month = int(month);\\n        int _day = int(day);\\n\\n        int __days = _day -\\n            32075 +\\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\\n            4 +\\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\n            12 -\\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\n            4 -\\n            OFFSET19700101;\\n\\n        _days = uint(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(\\n        uint _days\\n    ) internal pure returns (uint year, uint month, uint day) {\\n        int __days = int(_days);\\n\\n        int L = __days + 68569 + OFFSET19700101;\\n        int N = (4 * L) / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int _year = (4000 * (L + 1)) / 1461001;\\n        L = L - (1461 * _year) / 4 + 31;\\n        int _month = (80 * L) / 2447;\\n        int _day = L - (2447 * _month) / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint(_year);\\n        month = uint(_month);\\n        day = uint(_day);\\n    }\\n\\n    function timestampFromDate(\\n        uint year,\\n        uint month,\\n        uint day\\n    ) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n\\n    function timestampFromDateTime(\\n        uint year,\\n        uint month,\\n        uint day,\\n        uint hour,\\n        uint minute,\\n        uint second\\n    ) internal pure returns (uint timestamp) {\\n        timestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            hour *\\n            SECONDS_PER_HOUR +\\n            minute *\\n            SECONDS_PER_MINUTE +\\n            second;\\n    }\\n\\n    function timestampToDate(\\n        uint timestamp\\n    ) internal pure returns (uint year, uint month, uint day) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function timestampToDateTime(\\n        uint timestamp\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint year,\\n            uint month,\\n            uint day,\\n            uint hour,\\n            uint minute,\\n            uint second\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isValidDate(\\n        uint year,\\n        uint month,\\n        uint day\\n    ) internal pure returns (bool valid) {\\n        if (year >= 1970 && month > 0 && month <= 12) {\\n            uint daysInMonth = _getDaysInMonth(year, month);\\n            if (day > 0 && day <= daysInMonth) {\\n                valid = true;\\n            }\\n        }\\n    }\\n\\n    function isValidDateTime(\\n        uint year,\\n        uint month,\\n        uint day,\\n        uint hour,\\n        uint minute,\\n        uint second\\n    ) internal pure returns (bool valid) {\\n        if (isValidDate(year, month, day)) {\\n            if (hour < 24 && minute < 60 && second < 60) {\\n                valid = true;\\n            }\\n        }\\n    }\\n\\n    function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\\n        (uint year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n\\n    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n\\n    function isWeekDay(uint timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n\\n    function isWeekEnd(uint timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n\\n    function getDaysInMonth(\\n        uint timestamp\\n    ) internal pure returns (uint daysInMonth) {\\n        (uint year, uint month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n\\n    function _getDaysInMonth(\\n        uint year,\\n        uint month\\n    ) internal pure returns (uint daysInMonth) {\\n        if (\\n            month == 1 ||\\n            month == 3 ||\\n            month == 5 ||\\n            month == 7 ||\\n            month == 8 ||\\n            month == 10 ||\\n            month == 12\\n        ) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(\\n        uint timestamp\\n    ) internal pure returns (uint dayOfWeek) {\\n        uint _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = ((_days + 3) % 7) + 1;\\n    }\\n\\n    function getYear(uint timestamp) internal pure returns (uint year) {\\n        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getMonth(uint timestamp) internal pure returns (uint month) {\\n        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getDay(uint timestamp) internal pure returns (uint day) {\\n        (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getHour(uint timestamp) internal pure returns (uint hour) {\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n\\n    function getMinute(uint timestamp) internal pure returns (uint minute) {\\n        uint secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n\\n    function getSecond(uint timestamp) internal pure returns (uint second) {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(\\n        uint timestamp,\\n        uint _years\\n    ) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        year += _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMonths(\\n        uint timestamp,\\n        uint _months\\n    ) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = ((month - 1) % 12) + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addDays(\\n        uint timestamp,\\n        uint _days\\n    ) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addHours(\\n        uint timestamp,\\n        uint _hours\\n    ) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMinutes(\\n        uint timestamp,\\n        uint _minutes\\n    ) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addSeconds(\\n        uint timestamp,\\n        uint _seconds\\n    ) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subYears(\\n        uint timestamp,\\n        uint _years\\n    ) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        year -= _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subMonths(\\n        uint timestamp,\\n        uint _months\\n    ) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        uint yearMonth = year * 12 + (month - 1) - _months;\\n        year = yearMonth / 12;\\n        month = (yearMonth % 12) + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subDays(\\n        uint timestamp,\\n        uint _days\\n    ) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subHours(\\n        uint timestamp,\\n        uint _hours\\n    ) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subMinutes(\\n        uint timestamp,\\n        uint _minutes\\n    ) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subSeconds(\\n        uint timestamp,\\n        uint _seconds\\n    ) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function diffYears(\\n        uint fromTimestamp,\\n        uint toTimestamp\\n    ) internal pure returns (uint _years) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear, , ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear, , ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _years = toYear - fromYear;\\n    }\\n\\n    function diffMonths(\\n        uint fromTimestamp,\\n        uint toTimestamp\\n    ) internal pure returns (uint _months) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear, uint fromMonth, ) = _daysToDate(\\n            fromTimestamp / SECONDS_PER_DAY\\n        );\\n        (uint toYear, uint toMonth, ) = _daysToDate(\\n            toTimestamp / SECONDS_PER_DAY\\n        );\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n    }\\n\\n    function diffDays(\\n        uint fromTimestamp,\\n        uint toTimestamp\\n    ) internal pure returns (uint _days) {\\n        require(fromTimestamp <= toTimestamp);\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n    }\\n\\n    function diffHours(\\n        uint fromTimestamp,\\n        uint toTimestamp\\n    ) internal pure returns (uint _hours) {\\n        require(fromTimestamp <= toTimestamp);\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n\\n    function diffMinutes(\\n        uint fromTimestamp,\\n        uint toTimestamp\\n    ) internal pure returns (uint _minutes) {\\n        require(fromTimestamp <= toTimestamp);\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n    }\\n\\n    function diffSeconds(\\n        uint fromTimestamp,\\n        uint toTimestamp\\n    ) internal pure returns (uint _seconds) {\\n        require(fromTimestamp <= toTimestamp);\\n        _seconds = toTimestamp - fromTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xa91f54444d22ed6c6dde1e9672e4f18f93742abfb0c540237191133c4b6d2c40\",\"license\":\"MIT\"},\"contracts/Equb.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./BokkyPooBahsDateTimeContract.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\ncontract Equb {\\n    using SafeMath for uint;\\n    using PriceConverter for uint256;\\n\\n    uint256 public numberOfPools = 0;\\n    address timeContractAddress = 0x4385483b852D01655A7e760F616725C0c3db9873;\\n    BokkyPooBahsDateTimeContract timeContract =\\n        BokkyPooBahsDateTimeContract(timeContractAddress);\\n    AggregatorV3Interface public priceFeed;\\n    struct PoolData {\\n        address equbAddress;\\n        string poolName;\\n        string poolImage;\\n    }\\n\\n    struct Pool {\\n        address equbAddress;\\n        string name;\\n        string profileUrl;\\n        string email;\\n        string description;\\n        uint contributionAmount; //will be save in wei\\n        uint contributionDate; //5\\n        uint equbBalance;\\n        uint contributionSkipCount; //no need in frontend;\\n        string website;\\n        string twitterUrl;\\n        string facebookUrl;\\n        string telegramUrl;\\n        address[] members;\\n    }\\n\\n    Pool[] public pools;\\n    mapping(address => mapping(address => bool)) public contributions;\\n\\n    event ContributionEvent(\\n        address member,\\n        uint256 contributeAmount,\\n        uint256 daoBalance\\n    );\\n\\n    event SkipContributionEvent(address member, address equbAddress);\\n    event MemberRemovedEvent(address member, address equbAddress);\\n    event NextContributionTime(uint time);\\n    event Success(string message);\\n\\n    constructor() {\\n        priceFeed = AggregatorV3Interface(\\n            0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        );\\n    }\\n\\n    function hasContributed(\\n        address equbAddress,\\n        address member\\n    ) public view returns (bool) {\\n        return contributions[equbAddress][member];\\n    }\\n\\n    function createEqub(\\n        string memory _name,\\n        string memory _profileUrl,\\n        string memory _email,\\n        string memory _description,\\n        uint _contributionAmount,\\n        uint _contributionDate,\\n        string memory _website,\\n        string memory _twitterUrl,\\n        string memory _facebookUrl,\\n        string memory _telegramUrl,\\n        address[] memory _members\\n    ) public {\\n        require(_members.length <= 10, \\\"Maximum of 10 members can contribute\\\");\\n        // Check if the sender (creator) has already created a pool\\n        for (uint i = 0; i < pools.length; i++) {\\n            require(\\n                pools[i].equbAddress != msg.sender,\\n                \\\"Only one pool creation per address is allowed\\\"\\n            );\\n        }\\n        pools.push(\\n            Pool(\\n                msg.sender,\\n                _name,\\n                _profileUrl,\\n                _email,\\n                _description,\\n                _contributionAmount * 1e18,\\n                _contributionDate,\\n                0 * 1e18,\\n                0,\\n                _website,\\n                _twitterUrl,\\n                _facebookUrl,\\n                _telegramUrl,\\n                _members\\n            )\\n        );\\n        numberOfPools += 1;\\n        // Initialize contribution records for members\\n        for (uint i = 0; i < _members.length; i++) {\\n            contributions[msg.sender][_members[i]] = false;\\n        }\\n    }\\n\\n    function getPool(\\n        address equbAddress\\n    )\\n        public\\n        view\\n        returns (\\n            address _equbAddress,\\n            string memory _name,\\n            string memory _profileUrl,\\n            string memory _email,\\n            string memory _description,\\n            uint _contributionAmount,\\n            uint _contributionDate,\\n            uint _equbBalance,\\n            // uint _contributionSkipCount,\\n            string memory _website,\\n            string memory _twitterUrl,\\n            string memory _facebookUrl,\\n            string memory _telegramUrl,\\n            address[] memory _members\\n        )\\n    {\\n        for (uint i = 0; i < pools.length; i++) {\\n            if (pools[i].equbAddress == equbAddress) {\\n                return (\\n                    pools[i].equbAddress,\\n                    pools[i].name,\\n                    pools[i].profileUrl,\\n                    pools[i].email,\\n                    pools[i].description,\\n                    PriceConverter.getConversionRate(\\n                        pools[i].contributionAmount,\\n                        priceFeed\\n                    ),\\n                    pools[i].contributionDate,\\n                    PriceConverter.getConversionRate(\\n                        pools[i].equbBalance,\\n                        priceFeed\\n                    ),\\n                    // pools[i].contributionSkipCount,\\n                    pools[i].website,\\n                    pools[i].twitterUrl,\\n                    pools[i].facebookUrl,\\n                    pools[i].telegramUrl,\\n                    pools[i].members\\n                );\\n            }\\n        }\\n        revert(\\\"No pool created by this address\\\");\\n    }\\n\\n    function getPoolByMember(\\n        address member\\n    ) public view returns (PoolData[] memory) {\\n        PoolData[] memory poolData = new PoolData[](numberOfPools);\\n        uint k = 0;\\n        for (uint i = 0; i < pools.length; i++) {\\n            for (uint j = 0; j < pools[i].members.length; j++) {\\n                if (pools[i].members[j] == member) {\\n                    poolData[k] = PoolData(\\n                        pools[i].equbAddress,\\n                        pools[i].name,\\n                        pools[i].profileUrl\\n                    );\\n                    k++;\\n                }\\n            }\\n        }\\n        require(k > 0, \\\"Member not found in any pool.\\\");\\n        return poolData;\\n    }\\n\\n    function contribution(address equbAddress, address member) public payable {\\n        // Find the pool by equbAddress\\n\\n        uint poolIndex = getPoolIndex(equbAddress);\\n        uint contAmount = msg.value.getConversionRate(priceFeed);\\n        require(\\n            contAmount == pools[poolIndex].contributionAmount,\\n            \\\"Contribution amount is incorrect.\\\"\\n        );\\n\\n        //check the member skip count\\n        uint skipCount = getRemainingSkipCount(equbAddress, member);\\n        if (skipCount < 3) {\\n            removeMember(equbAddress, member);\\n            revert(\\n                \\\"You have skipped the contribution for three times, You will be removed from the pool.\\\"\\n            );\\n        }\\n\\n        //Check the current date and compare it to the contribution date\\n        uint256 today = timeContract.getDay(block.timestamp);\\n        // uint256 month = BokkyPooBahsDateTimeLibrary.getMonth(block.timestamp);\\n        // uint256 year = BokkyPooBahsDateTimeLibrary.getYear(block.timestamp);\\n        //if the day pass\\n        if (today > pools[poolIndex].contributionDate) {\\n            //check if this is first time that member skip contribution\\n            if (contributions[equbAddress][member]) {\\n                //increment the skip count\\n                pools[poolIndex].contributionSkipCount += 1;\\n                //Emit event\\n                emit SkipContributionEvent(member, equbAddress);\\n                if (skipCount == 2) {\\n                    //remove the member from the pool\\n                    removeMember(equbAddress, member);\\n                    emit MemberRemovedEvent(member, equbAddress);\\n                }\\n            }\\n        } else {\\n            // Add the contribution amount to the pool balance\\n            pools[poolIndex].equbBalance += contAmount;\\n\\n            // Mark the contribution as done\\n            contributions[equbAddress][member] = true;\\n\\n            // Emit the Contribution event\\n            emit ContributionEvent(\\n                member,\\n                contAmount,\\n                pools[poolIndex].equbBalance\\n            );\\n            emit NextContributionTime(pools[poolIndex].contributionDate);\\n        }\\n    }\\n\\n    function getPoolIndex(address equbAddress) private view returns (uint) {\\n        for (uint i = 0; i < pools.length; i++) {\\n            if (pools[i].equbAddress == equbAddress) {\\n                return i;\\n            }\\n        }\\n        revert(\\\"Pool not found\\\");\\n    }\\n\\n    function getRemainingSkipCount(\\n        address equbAddress,\\n        address member\\n    ) public view returns (uint) {\\n        // Find the pool by equbAddress\\n        uint poolIndex;\\n        for (uint i = 0; i < pools.length; i++) {\\n            if (pools[i].equbAddress == equbAddress) {\\n                poolIndex = i;\\n                break;\\n            }\\n        }\\n        // Check if the member has contributed\\n        if (!contributions[equbAddress][member]) {\\n            // If the member has not contributed, skipsLeft = 3\\n            return 3;\\n        } else {\\n            // If the member has contributed, calculate skipsLeft\\n            return 3 - pools[poolIndex].contributionSkipCount;\\n        }\\n    }\\n\\n    function removeMember(address equbAddress, address member) internal {\\n        for (uint i = 0; i < pools.length; i++) {\\n            if (pools[i].equbAddress == equbAddress) {\\n                address[] memory members = pools[i].members;\\n                for (uint j = 0; j < members.length; j++) {\\n                    if (members[j] == member) {\\n                        //delete the member from the array\\n                        delete members[j];\\n                        //update the member array\\n                        pools[i].members = members;\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xde4047c608455b223fd8e7ed198d254051fbd4ce573347943e0210a7e82d2d3c\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        //ABI\\n        //Address 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e); no need anymore\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        return uint256(price * 1e10); //1**10 == 10000000000\\n    }\\n\\n    // function getVersion() internal view returns (uint256) {\\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\\n    //     return priceFeed.version();\\n    // }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xe5752cc38b5dabbb3e3e4ebbf0be520f6e9e59021a4828567cb719b059a6d755\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000805560018054734385483b852d01655a7e760f616725c0c3db98736001600160a01b0319918216811790925560028054909116909117905534801561004a57600080fd5b50600380546001600160a01b03191673d4a33860578de61dbabdc8bfdb98fd742fa7028e17905561276d806100806000396000f3fe6080604052600436106100915760003560e01c8063ac4afa3811610059578063ac4afa381461018f578063bb2061b2146101c8578063bbe4f6db14610211578063e829f5f11461024a578063f39d31de1461026c57600080fd5b806329369ccf146100965780634fd803c7146100e65780636f682a5314610113578063741bef1a146101375780637e44e9d91461016f575b600080fd5b3480156100a257600080fd5b506100d16100b1366004612059565b600560209081526000928352604080842090915290825290205460ff1681565b60405190151581526020015b60405180910390f35b3480156100f257600080fd5b5061010661010136600461203e565b61027f565b6040516100dd91906124dd565b34801561011f57600080fd5b5061012960005481565b6040519081526020016100dd565b34801561014357600080fd5b50600354610157906001600160a01b031681565b6040516001600160a01b0390911681526020016100dd565b34801561017b57600080fd5b5061012961018a366004612059565b6105e9565b34801561019b57600080fd5b506101af6101aa366004612211565b6106c3565b6040516100dd9d9c9b9a99989796959493929190612412565b3480156101d457600080fd5b506100d16101e3366004612059565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561021d57600080fd5b5061023161022c36600461203e565b610b7f565b6040516100dd9d9c9b9a99989796959493929190612324565b34801561025657600080fd5b5061026a61026536600461208c565b611336565b005b61026a61027a366004612059565b6116d3565b60606000805467ffffffffffffffff81111561029d5761029d612721565b6040519080825280602002602001820160405280156102fb57816020015b6102e8604051806060016040528060006001600160a01b0316815260200160608152602001606081525090565b8152602001906001900390816102bb5790505b5090506000805b60045481101561058c5760005b600482815481106103225761032261270b565b90600052602060002090600e0201600d018054905081101561057957856001600160a01b03166004838154811061035b5761035b61270b565b90600052602060002090600e0201600d01828154811061037d5761037d61270b565b6000918252602090912001546001600160a01b03161415610567576040518060600160405280600484815481106103b6576103b661270b565b6000918252602091829020600e90910201546001600160a01b03168252600480549290910191859081106103ec576103ec61270b565b90600052602060002090600e020160010180546104089061269f565b80601f01602080910402602001604051908101604052809291908181526020018280546104349061269f565b80156104815780601f1061045657610100808354040283529160200191610481565b820191906000526020600020905b81548152906001019060200180831161046457829003601f168201915b505050505081526020016004848154811061049e5761049e61270b565b90600052602060002090600e020160020180546104ba9061269f565b80601f01602080910402602001604051908101604052809291908181526020018280546104e69061269f565b80156105335780601f1061050857610100808354040283529160200191610533565b820191906000526020600020905b81548152906001019060200180831161051657829003601f168201915b505050505081525084848151811061054d5761054d61270b565b60200260200101819052508280610563906126da565b9350505b80610571816126da565b91505061030f565b5080610584816126da565b915050610302565b50600081116105e25760405162461bcd60e51b815260206004820152601d60248201527f4d656d626572206e6f7420666f756e6420696e20616e7920706f6f6c2e00000060448201526064015b60405180910390fd5b5092915050565b60008060005b60045481101561065057846001600160a01b0316600482815481106106165761061661270b565b60009182526020909120600e90910201546001600160a01b0316141561063e57809150610650565b80610648816126da565b9150506105ef565b506001600160a01b0380851660009081526005602090815260408083209387168352929052205460ff166106885760039150506106bd565b6004818154811061069b5761069b61270b565b90600052602060002090600e02016008015460036106b99190612688565b9150505b92915050565b600481815481106106d357600080fd5b60009182526020909120600e9091020180546001820180546001600160a01b039092169350906107029061269f565b80601f016020809104026020016040519081016040528092919081815260200182805461072e9061269f565b801561077b5780601f106107505761010080835404028352916020019161077b565b820191906000526020600020905b81548152906001019060200180831161075e57829003601f168201915b5050505050908060020180546107909061269f565b80601f01602080910402602001604051908101604052809291908181526020018280546107bc9061269f565b80156108095780601f106107de57610100808354040283529160200191610809565b820191906000526020600020905b8154815290600101906020018083116107ec57829003601f168201915b50505050509080600301805461081e9061269f565b80601f016020809104026020016040519081016040528092919081815260200182805461084a9061269f565b80156108975780601f1061086c57610100808354040283529160200191610897565b820191906000526020600020905b81548152906001019060200180831161087a57829003601f168201915b5050505050908060040180546108ac9061269f565b80601f01602080910402602001604051908101604052809291908181526020018280546108d89061269f565b80156109255780601f106108fa57610100808354040283529160200191610925565b820191906000526020600020905b81548152906001019060200180831161090857829003601f168201915b5050505050908060050154908060060154908060070154908060080154908060090180546109529061269f565b80601f016020809104026020016040519081016040528092919081815260200182805461097e9061269f565b80156109cb5780601f106109a0576101008083540402835291602001916109cb565b820191906000526020600020905b8154815290600101906020018083116109ae57829003601f168201915b50505050509080600a0180546109e09061269f565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0c9061269f565b8015610a595780601f10610a2e57610100808354040283529160200191610a59565b820191906000526020600020905b815481529060010190602001808311610a3c57829003601f168201915b50505050509080600b018054610a6e9061269f565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9a9061269f565b8015610ae75780601f10610abc57610100808354040283529160200191610ae7565b820191906000526020600020905b815481529060010190602001808311610aca57829003601f168201915b50505050509080600c018054610afc9061269f565b80601f0160208091040260200160405190810160405280929190818152602001828054610b289061269f565b8015610b755780601f10610b4a57610100808354040283529160200191610b75565b820191906000526020600020905b815481529060010190602001808311610b5857829003601f168201915b505050505090508d565b60006060806060806000806000606080606080606060005b6004548110156112dc578e6001600160a01b031660048281548110610bbe57610bbe61270b565b60009182526020909120600e90910201546001600160a01b031614156112ca5760048181548110610bf157610bf161270b565b60009182526020909120600e9091020154600480546001600160a01b039092169183908110610c2257610c2261270b565b90600052602060002090600e020160010160048381548110610c4657610c4661270b565b90600052602060002090600e020160020160048481548110610c6a57610c6a61270b565b90600052602060002090600e020160030160048581548110610c8e57610c8e61270b565b90600052602060002090600e0201600401610cda60048781548110610cb557610cb561270b565b600091825260209091206005600e9092020101546003546001600160a01b0316611b1d565b60048781548110610ced57610ced61270b565b90600052602060002090600e020160060154610d3a60048981548110610d1557610d1561270b565b600091825260209091206007600e9092020101546003546001600160a01b0316611b1d565b60048981548110610d4d57610d4d61270b565b90600052602060002090600e020160090160048a81548110610d7157610d7161270b565b90600052602060002090600e0201600a0160048b81548110610d9557610d9561270b565b90600052602060002090600e0201600b0160048c81548110610db957610db961270b565b90600052602060002090600e0201600c0160048d81548110610ddd57610ddd61270b565b90600052602060002090600e0201600d018b8054610dfa9061269f565b80601f0160208091040260200160405190810160405280929190818152602001828054610e269061269f565b8015610e735780601f10610e4857610100808354040283529160200191610e73565b820191906000526020600020905b815481529060010190602001808311610e5657829003601f168201915b50505050509b508a8054610e869061269f565b80601f0160208091040260200160405190810160405280929190818152602001828054610eb29061269f565b8015610eff5780601f10610ed457610100808354040283529160200191610eff565b820191906000526020600020905b815481529060010190602001808311610ee257829003601f168201915b50505050509a50898054610f129061269f565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3e9061269f565b8015610f8b5780601f10610f6057610100808354040283529160200191610f8b565b820191906000526020600020905b815481529060010190602001808311610f6e57829003601f168201915b50505050509950888054610f9e9061269f565b80601f0160208091040260200160405190810160405280929190818152602001828054610fca9061269f565b80156110175780601f10610fec57610100808354040283529160200191611017565b820191906000526020600020905b815481529060010190602001808311610ffa57829003601f168201915b5050505050985084805461102a9061269f565b80601f01602080910402602001604051908101604052809291908181526020018280546110569061269f565b80156110a35780601f10611078576101008083540402835291602001916110a3565b820191906000526020600020905b81548152906001019060200180831161108657829003601f168201915b505050505094508380546110b69061269f565b80601f01602080910402602001604051908101604052809291908181526020018280546110e29061269f565b801561112f5780601f106111045761010080835404028352916020019161112f565b820191906000526020600020905b81548152906001019060200180831161111257829003601f168201915b505050505093508280546111429061269f565b80601f016020809104026020016040519081016040528092919081815260200182805461116e9061269f565b80156111bb5780601f10611190576101008083540402835291602001916111bb565b820191906000526020600020905b81548152906001019060200180831161119e57829003601f168201915b505050505092508180546111ce9061269f565b80601f01602080910402602001604051908101604052809291908181526020018280546111fa9061269f565b80156112475780601f1061121c57610100808354040283529160200191611247565b820191906000526020600020905b81548152906001019060200180831161122a57829003601f168201915b50505050509150808054806020026020016040519081016040528092919081815260200182805480156112a357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611285575b505050505090509d509d509d509d509d509d509d509d509d509d509d509d509d5050611325565b806112d4816126da565b915050610b97565b5060405162461bcd60e51b815260206004820152601f60248201527f4e6f20706f6f6c2063726561746564206279207468697320616464726573730060448201526064016105d9565b91939597999b9d90929496989a9c50565b600a815111156113945760405162461bcd60e51b8152602060048201526024808201527f4d6178696d756d206f66203130206d656d626572732063616e20636f6e7472696044820152636275746560e01b60648201526084016105d9565b60005b60045481101561144e57336001600160a01b0316600482815481106113be576113be61270b565b60009182526020909120600e90910201546001600160a01b0316141561143c5760405162461bcd60e51b815260206004820152602d60248201527f4f6e6c79206f6e6520706f6f6c206372656174696f6e2070657220616464726560448201526c1cdcc81a5cc8185b1b1bddd959609a1b60648201526084016105d9565b80611446816126da565b915050611397565b506004604051806101c00160405280336001600160a01b031681526020018d81526020018c81526020018b81526020018a815260200189670de0b6b3a76400006114989190612669565b815260208082018a905260006040830181905260608301819052608083018a905260a0830189905260c0830188905260e08301879052610100909201859052835460018082018655948352918190208351600e9093020180546001600160a01b0319166001600160a01b0390931692909217825582810151805193949293611527938501929190910190611e1d565b5060408201518051611543916002840191602090910190611e1d565b506060820151805161155f916003840191602090910190611e1d565b506080820151805161157b916004840191602090910190611e1d565b5060a0820151600582015560c0820151600682015560e08201516007820155610100820151600882015561012082015180516115c1916009840191602090910190611e1d565b5061014082015180516115de91600a840191602090910190611e1d565b5061016082015180516115fb91600b840191602090910190611e1d565b50610180820151805161161891600c840191602090910190611e1d565b506101a0820151805161163591600d840191602090910190611ea1565b505050600160008082825461164a91906125aa565b90915550600090505b81518110156116c557336000908152600560205260408120835182908590859081106116815761168161270b565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806116bd816126da565b915050611653565b505050505050505050505050565b60006116de83611b53565b6003549091506000906116fb9034906001600160a01b0316611b1d565b9050600482815481106117105761171061270b565b90600052602060002090600e020160050154811461177a5760405162461bcd60e51b815260206004820152602160248201527f436f6e747269627574696f6e20616d6f756e7420697320696e636f72726563746044820152601760f91b60648201526084016105d9565b600061178685856105e9565b905060038110156118275761179b8585611bf0565b60405162461bcd60e51b815260206004820152605560248201527f596f75206861766520736b69707065642074686520636f6e747269627574696f60448201527f6e20666f722074687265652074696d65732c20596f752077696c6c206265207260648201527432b6b7bb32b210333937b6903a3432903837b7b61760591b608482015260a4016105d9565b6002546040516301971ca160e61b81524260048201526000916001600160a01b0316906365c728409060240160206040518083038186803b15801561186b57600080fd5b505afa15801561187f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a3919061222a565b9050600484815481106118b8576118b861270b565b90600052602060002090600e0201600601548111156119d8576001600160a01b0380871660009081526005602090815260408083209389168352929052205460ff16156119d3576001600485815481106119145761191461270b565b90600052602060002090600e0201600801600082825461193491906125aa565b9091555050604080516001600160a01b038088168252881660208201527fd43485683ba44222b671528a56c7c136870b12a63cc9720777fedb411e9922f2910160405180910390a181600214156119d35761198f8686611bf0565b604080516001600160a01b038088168252881660208201527f385ed1016e687501ffbb737f74ef150790252d933d46cb591d8f0591e28db66f910160405180910390a15b611b15565b82600485815481106119ec576119ec61270b565b90600052602060002090600e02016007016000828254611a0c91906125aa565b90915550506001600160a01b038087166000908152600560209081526040808320938916835292905220805460ff19166001179055600480547fb975907a1b40ddf25784959946563732fd064d1deb3b4a003ef5d88690c4ee7291879186919088908110611a7c57611a7c61270b565b60009182526020918290206007600e909202010154604080516001600160a01b0390951685529184019290925282015260600160405180910390a17fd79c8e1b3261dda76daa26bb0252bb920ebd301a6d2dcb8c126bae8cc5a6c14760048581548110611aeb57611aeb61270b565b90600052602060002090600e020160060154604051611b0c91815260200190565b60405180910390a15b505050505050565b600080611b2983611d8b565b90506000670de0b6b3a7640000611b408684612669565b611b4a91906125c2565b95945050505050565b6000805b600454811015611bb657826001600160a01b031660048281548110611b7e57611b7e61270b565b60009182526020909120600e90910201546001600160a01b03161415611ba45792915050565b80611bae816126da565b915050611b57565b5060405162461bcd60e51b815260206004820152600e60248201526d141bdbdb081b9bdd08199bdd5b9960921b60448201526064016105d9565b60005b600454811015611d8657826001600160a01b031660048281548110611c1a57611c1a61270b565b60009182526020909120600e90910201546001600160a01b03161415611d7457600060048281548110611c4f57611c4f61270b565b90600052602060002090600e0201600d01805480602002602001604051908101604052809291908181526020018280548015611cb457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611c96575b5050505050905060005b8151811015611d7157836001600160a01b0316828281518110611ce357611ce361270b565b60200260200101516001600160a01b03161415611d5f57818181518110611d0c57611d0c61270b565b6020026020010160006001600160a01b03168152508160048481548110611d3557611d3561270b565b90600052602060002090600e0201600d019080519060200190611d59929190611ea1565b50611d71565b80611d69816126da565b915050611cbe565b50505b80611d7e816126da565b915050611bf3565b505050565b600080826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015611dc757600080fd5b505afa158015611ddb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dff9190612243565b505050915050806402540be400611e1691906125e4565b9392505050565b828054611e299061269f565b90600052602060002090601f016020900481019282611e4b5760008555611e91565b82601f10611e6457805160ff1916838001178555611e91565b82800160010185558215611e91579182015b82811115611e91578251825591602001919060010190611e76565b50611e9d929150611ef6565b5090565b828054828255906000526020600020908101928215611e91579160200282015b82811115611e9157825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611ec1565b5b80821115611e9d5760008155600101611ef7565b80356001600160a01b0381168114611f2257600080fd5b919050565b600082601f830112611f3857600080fd5b8135602067ffffffffffffffff821115611f5457611f54612721565b8160051b611f63828201612579565b838152828101908684018388018501891015611f7e57600080fd5b600093505b85841015611fa857611f9481611f0b565b835260019390930192918401918401611f83565b50979650505050505050565b600082601f830112611fc557600080fd5b813567ffffffffffffffff811115611fdf57611fdf612721565b611ff2601f8201601f1916602001612579565b81815284602083860101111561200757600080fd5b816020850160208301376000918101602001919091529392505050565b805169ffffffffffffffffffff81168114611f2257600080fd5b60006020828403121561205057600080fd5b611e1682611f0b565b6000806040838503121561206c57600080fd5b61207583611f0b565b915061208360208401611f0b565b90509250929050565b60008060008060008060008060008060006101608c8e0312156120ae57600080fd5b67ffffffffffffffff808d3511156120c557600080fd5b6120d28e8e358f01611fb4565b9b508060208e013511156120e557600080fd5b6120f58e60208f01358f01611fb4565b9a508060408e0135111561210857600080fd5b6121188e60408f01358f01611fb4565b99508060608e0135111561212b57600080fd5b61213b8e60608f01358f01611fb4565b985060808d0135975060a08d013596508060c08e0135111561215c57600080fd5b61216c8e60c08f01358f01611fb4565b95508060e08e0135111561217f57600080fd5b61218f8e60e08f01358f01611fb4565b9450806101008e013511156121a357600080fd5b6121b48e6101008f01358f01611fb4565b9350806101208e013511156121c857600080fd5b6121d98e6101208f01358f01611fb4565b9250806101408e013511156121ed57600080fd5b506121ff8d6101408e01358e01611f27565b90509295989b509295989b9093969950565b60006020828403121561222357600080fd5b5035919050565b60006020828403121561223c57600080fd5b5051919050565b600080600080600060a0868803121561225b57600080fd5b61226486612024565b945060208601519350604086015192506060860151915061228760808701612024565b90509295509295909350565b600081518084526020808501945080840160005b838110156122cc5781516001600160a01b0316875295820195908201906001016122a7565b509495945050505050565b6000815180845260005b818110156122fd576020818501810151868301820152016122e1565b8181111561230f576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038e1681526101a0602082015260006123486101a083018f6122d7565b828103604084015261235a818f6122d7565b9050828103606084015261236e818e6122d7565b90508281036080840152612382818d6122d7565b90508a60a08401528960c08401528860e08401528281036101008401526123a981896122d7565b90508281036101208401526123be81886122d7565b90508281036101408401526123d381876122d7565b90508281036101608401526123e881866122d7565b90508281036101808401526123fd8185612293565b9150509e9d5050505050505050505050505050565b6001600160a01b038e1681526101a0602082015260006124366101a083018f6122d7565b8281036040840152612448818f6122d7565b9050828103606084015261245c818e6122d7565b90508281036080840152612470818d6122d7565b90508a60a08401528960c08401528860e08401528761010084015282810361012084015261249e81886122d7565b90508281036101408401526124b381876122d7565b90508281036101608401526124c881866122d7565b90508281036101808401526123fd81856122d7565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561256b57888303603f19018552815180516001600160a01b031684528781015160608986018190529061253d828701826122d7565b9150508782015191508481038886015261255781836122d7565b968901969450505090860190600101612504565b509098975050505050505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156125a2576125a2612721565b604052919050565b600082198211156125bd576125bd6126f5565b500190565b6000826125df57634e487b7160e01b600052601260045260246000fd5b500490565b60006001600160ff1b038184138284138082168684048611161561260a5761260a6126f5565b600160ff1b6000871282811687830589121615612629576126296126f5565b60008712925087820587128484161615612645576126456126f5565b8785058712818416161561265b5761265b6126f5565b505050929093029392505050565b6000816000190483118215151615612683576126836126f5565b500290565b60008282101561269a5761269a6126f5565b500390565b600181811c908216806126b357607f821691505b602082108114156126d457634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156126ee576126ee6126f5565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212207facf08e8b7fff3b9d2542c81b620ca1c349be7cf49bc5a4f96d8ed01f37f7f864736f6c63430008050033",
  "deployedBytecode": "0x6080604052600436106100915760003560e01c8063ac4afa3811610059578063ac4afa381461018f578063bb2061b2146101c8578063bbe4f6db14610211578063e829f5f11461024a578063f39d31de1461026c57600080fd5b806329369ccf146100965780634fd803c7146100e65780636f682a5314610113578063741bef1a146101375780637e44e9d91461016f575b600080fd5b3480156100a257600080fd5b506100d16100b1366004612059565b600560209081526000928352604080842090915290825290205460ff1681565b60405190151581526020015b60405180910390f35b3480156100f257600080fd5b5061010661010136600461203e565b61027f565b6040516100dd91906124dd565b34801561011f57600080fd5b5061012960005481565b6040519081526020016100dd565b34801561014357600080fd5b50600354610157906001600160a01b031681565b6040516001600160a01b0390911681526020016100dd565b34801561017b57600080fd5b5061012961018a366004612059565b6105e9565b34801561019b57600080fd5b506101af6101aa366004612211565b6106c3565b6040516100dd9d9c9b9a99989796959493929190612412565b3480156101d457600080fd5b506100d16101e3366004612059565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561021d57600080fd5b5061023161022c36600461203e565b610b7f565b6040516100dd9d9c9b9a99989796959493929190612324565b34801561025657600080fd5b5061026a61026536600461208c565b611336565b005b61026a61027a366004612059565b6116d3565b60606000805467ffffffffffffffff81111561029d5761029d612721565b6040519080825280602002602001820160405280156102fb57816020015b6102e8604051806060016040528060006001600160a01b0316815260200160608152602001606081525090565b8152602001906001900390816102bb5790505b5090506000805b60045481101561058c5760005b600482815481106103225761032261270b565b90600052602060002090600e0201600d018054905081101561057957856001600160a01b03166004838154811061035b5761035b61270b565b90600052602060002090600e0201600d01828154811061037d5761037d61270b565b6000918252602090912001546001600160a01b03161415610567576040518060600160405280600484815481106103b6576103b661270b565b6000918252602091829020600e90910201546001600160a01b03168252600480549290910191859081106103ec576103ec61270b565b90600052602060002090600e020160010180546104089061269f565b80601f01602080910402602001604051908101604052809291908181526020018280546104349061269f565b80156104815780601f1061045657610100808354040283529160200191610481565b820191906000526020600020905b81548152906001019060200180831161046457829003601f168201915b505050505081526020016004848154811061049e5761049e61270b565b90600052602060002090600e020160020180546104ba9061269f565b80601f01602080910402602001604051908101604052809291908181526020018280546104e69061269f565b80156105335780601f1061050857610100808354040283529160200191610533565b820191906000526020600020905b81548152906001019060200180831161051657829003601f168201915b505050505081525084848151811061054d5761054d61270b565b60200260200101819052508280610563906126da565b9350505b80610571816126da565b91505061030f565b5080610584816126da565b915050610302565b50600081116105e25760405162461bcd60e51b815260206004820152601d60248201527f4d656d626572206e6f7420666f756e6420696e20616e7920706f6f6c2e00000060448201526064015b60405180910390fd5b5092915050565b60008060005b60045481101561065057846001600160a01b0316600482815481106106165761061661270b565b60009182526020909120600e90910201546001600160a01b0316141561063e57809150610650565b80610648816126da565b9150506105ef565b506001600160a01b0380851660009081526005602090815260408083209387168352929052205460ff166106885760039150506106bd565b6004818154811061069b5761069b61270b565b90600052602060002090600e02016008015460036106b99190612688565b9150505b92915050565b600481815481106106d357600080fd5b60009182526020909120600e9091020180546001820180546001600160a01b039092169350906107029061269f565b80601f016020809104026020016040519081016040528092919081815260200182805461072e9061269f565b801561077b5780601f106107505761010080835404028352916020019161077b565b820191906000526020600020905b81548152906001019060200180831161075e57829003601f168201915b5050505050908060020180546107909061269f565b80601f01602080910402602001604051908101604052809291908181526020018280546107bc9061269f565b80156108095780601f106107de57610100808354040283529160200191610809565b820191906000526020600020905b8154815290600101906020018083116107ec57829003601f168201915b50505050509080600301805461081e9061269f565b80601f016020809104026020016040519081016040528092919081815260200182805461084a9061269f565b80156108975780601f1061086c57610100808354040283529160200191610897565b820191906000526020600020905b81548152906001019060200180831161087a57829003601f168201915b5050505050908060040180546108ac9061269f565b80601f01602080910402602001604051908101604052809291908181526020018280546108d89061269f565b80156109255780601f106108fa57610100808354040283529160200191610925565b820191906000526020600020905b81548152906001019060200180831161090857829003601f168201915b5050505050908060050154908060060154908060070154908060080154908060090180546109529061269f565b80601f016020809104026020016040519081016040528092919081815260200182805461097e9061269f565b80156109cb5780601f106109a0576101008083540402835291602001916109cb565b820191906000526020600020905b8154815290600101906020018083116109ae57829003601f168201915b50505050509080600a0180546109e09061269f565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0c9061269f565b8015610a595780601f10610a2e57610100808354040283529160200191610a59565b820191906000526020600020905b815481529060010190602001808311610a3c57829003601f168201915b50505050509080600b018054610a6e9061269f565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9a9061269f565b8015610ae75780601f10610abc57610100808354040283529160200191610ae7565b820191906000526020600020905b815481529060010190602001808311610aca57829003601f168201915b50505050509080600c018054610afc9061269f565b80601f0160208091040260200160405190810160405280929190818152602001828054610b289061269f565b8015610b755780601f10610b4a57610100808354040283529160200191610b75565b820191906000526020600020905b815481529060010190602001808311610b5857829003601f168201915b505050505090508d565b60006060806060806000806000606080606080606060005b6004548110156112dc578e6001600160a01b031660048281548110610bbe57610bbe61270b565b60009182526020909120600e90910201546001600160a01b031614156112ca5760048181548110610bf157610bf161270b565b60009182526020909120600e9091020154600480546001600160a01b039092169183908110610c2257610c2261270b565b90600052602060002090600e020160010160048381548110610c4657610c4661270b565b90600052602060002090600e020160020160048481548110610c6a57610c6a61270b565b90600052602060002090600e020160030160048581548110610c8e57610c8e61270b565b90600052602060002090600e0201600401610cda60048781548110610cb557610cb561270b565b600091825260209091206005600e9092020101546003546001600160a01b0316611b1d565b60048781548110610ced57610ced61270b565b90600052602060002090600e020160060154610d3a60048981548110610d1557610d1561270b565b600091825260209091206007600e9092020101546003546001600160a01b0316611b1d565b60048981548110610d4d57610d4d61270b565b90600052602060002090600e020160090160048a81548110610d7157610d7161270b565b90600052602060002090600e0201600a0160048b81548110610d9557610d9561270b565b90600052602060002090600e0201600b0160048c81548110610db957610db961270b565b90600052602060002090600e0201600c0160048d81548110610ddd57610ddd61270b565b90600052602060002090600e0201600d018b8054610dfa9061269f565b80601f0160208091040260200160405190810160405280929190818152602001828054610e269061269f565b8015610e735780601f10610e4857610100808354040283529160200191610e73565b820191906000526020600020905b815481529060010190602001808311610e5657829003601f168201915b50505050509b508a8054610e869061269f565b80601f0160208091040260200160405190810160405280929190818152602001828054610eb29061269f565b8015610eff5780601f10610ed457610100808354040283529160200191610eff565b820191906000526020600020905b815481529060010190602001808311610ee257829003601f168201915b50505050509a50898054610f129061269f565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3e9061269f565b8015610f8b5780601f10610f6057610100808354040283529160200191610f8b565b820191906000526020600020905b815481529060010190602001808311610f6e57829003601f168201915b50505050509950888054610f9e9061269f565b80601f0160208091040260200160405190810160405280929190818152602001828054610fca9061269f565b80156110175780601f10610fec57610100808354040283529160200191611017565b820191906000526020600020905b815481529060010190602001808311610ffa57829003601f168201915b5050505050985084805461102a9061269f565b80601f01602080910402602001604051908101604052809291908181526020018280546110569061269f565b80156110a35780601f10611078576101008083540402835291602001916110a3565b820191906000526020600020905b81548152906001019060200180831161108657829003601f168201915b505050505094508380546110b69061269f565b80601f01602080910402602001604051908101604052809291908181526020018280546110e29061269f565b801561112f5780601f106111045761010080835404028352916020019161112f565b820191906000526020600020905b81548152906001019060200180831161111257829003601f168201915b505050505093508280546111429061269f565b80601f016020809104026020016040519081016040528092919081815260200182805461116e9061269f565b80156111bb5780601f10611190576101008083540402835291602001916111bb565b820191906000526020600020905b81548152906001019060200180831161119e57829003601f168201915b505050505092508180546111ce9061269f565b80601f01602080910402602001604051908101604052809291908181526020018280546111fa9061269f565b80156112475780601f1061121c57610100808354040283529160200191611247565b820191906000526020600020905b81548152906001019060200180831161122a57829003601f168201915b50505050509150808054806020026020016040519081016040528092919081815260200182805480156112a357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611285575b505050505090509d509d509d509d509d509d509d509d509d509d509d509d509d5050611325565b806112d4816126da565b915050610b97565b5060405162461bcd60e51b815260206004820152601f60248201527f4e6f20706f6f6c2063726561746564206279207468697320616464726573730060448201526064016105d9565b91939597999b9d90929496989a9c50565b600a815111156113945760405162461bcd60e51b8152602060048201526024808201527f4d6178696d756d206f66203130206d656d626572732063616e20636f6e7472696044820152636275746560e01b60648201526084016105d9565b60005b60045481101561144e57336001600160a01b0316600482815481106113be576113be61270b565b60009182526020909120600e90910201546001600160a01b0316141561143c5760405162461bcd60e51b815260206004820152602d60248201527f4f6e6c79206f6e6520706f6f6c206372656174696f6e2070657220616464726560448201526c1cdcc81a5cc8185b1b1bddd959609a1b60648201526084016105d9565b80611446816126da565b915050611397565b506004604051806101c00160405280336001600160a01b031681526020018d81526020018c81526020018b81526020018a815260200189670de0b6b3a76400006114989190612669565b815260208082018a905260006040830181905260608301819052608083018a905260a0830189905260c0830188905260e08301879052610100909201859052835460018082018655948352918190208351600e9093020180546001600160a01b0319166001600160a01b0390931692909217825582810151805193949293611527938501929190910190611e1d565b5060408201518051611543916002840191602090910190611e1d565b506060820151805161155f916003840191602090910190611e1d565b506080820151805161157b916004840191602090910190611e1d565b5060a0820151600582015560c0820151600682015560e08201516007820155610100820151600882015561012082015180516115c1916009840191602090910190611e1d565b5061014082015180516115de91600a840191602090910190611e1d565b5061016082015180516115fb91600b840191602090910190611e1d565b50610180820151805161161891600c840191602090910190611e1d565b506101a0820151805161163591600d840191602090910190611ea1565b505050600160008082825461164a91906125aa565b90915550600090505b81518110156116c557336000908152600560205260408120835182908590859081106116815761168161270b565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806116bd816126da565b915050611653565b505050505050505050505050565b60006116de83611b53565b6003549091506000906116fb9034906001600160a01b0316611b1d565b9050600482815481106117105761171061270b565b90600052602060002090600e020160050154811461177a5760405162461bcd60e51b815260206004820152602160248201527f436f6e747269627574696f6e20616d6f756e7420697320696e636f72726563746044820152601760f91b60648201526084016105d9565b600061178685856105e9565b905060038110156118275761179b8585611bf0565b60405162461bcd60e51b815260206004820152605560248201527f596f75206861766520736b69707065642074686520636f6e747269627574696f60448201527f6e20666f722074687265652074696d65732c20596f752077696c6c206265207260648201527432b6b7bb32b210333937b6903a3432903837b7b61760591b608482015260a4016105d9565b6002546040516301971ca160e61b81524260048201526000916001600160a01b0316906365c728409060240160206040518083038186803b15801561186b57600080fd5b505afa15801561187f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a3919061222a565b9050600484815481106118b8576118b861270b565b90600052602060002090600e0201600601548111156119d8576001600160a01b0380871660009081526005602090815260408083209389168352929052205460ff16156119d3576001600485815481106119145761191461270b565b90600052602060002090600e0201600801600082825461193491906125aa565b9091555050604080516001600160a01b038088168252881660208201527fd43485683ba44222b671528a56c7c136870b12a63cc9720777fedb411e9922f2910160405180910390a181600214156119d35761198f8686611bf0565b604080516001600160a01b038088168252881660208201527f385ed1016e687501ffbb737f74ef150790252d933d46cb591d8f0591e28db66f910160405180910390a15b611b15565b82600485815481106119ec576119ec61270b565b90600052602060002090600e02016007016000828254611a0c91906125aa565b90915550506001600160a01b038087166000908152600560209081526040808320938916835292905220805460ff19166001179055600480547fb975907a1b40ddf25784959946563732fd064d1deb3b4a003ef5d88690c4ee7291879186919088908110611a7c57611a7c61270b565b60009182526020918290206007600e909202010154604080516001600160a01b0390951685529184019290925282015260600160405180910390a17fd79c8e1b3261dda76daa26bb0252bb920ebd301a6d2dcb8c126bae8cc5a6c14760048581548110611aeb57611aeb61270b565b90600052602060002090600e020160060154604051611b0c91815260200190565b60405180910390a15b505050505050565b600080611b2983611d8b565b90506000670de0b6b3a7640000611b408684612669565b611b4a91906125c2565b95945050505050565b6000805b600454811015611bb657826001600160a01b031660048281548110611b7e57611b7e61270b565b60009182526020909120600e90910201546001600160a01b03161415611ba45792915050565b80611bae816126da565b915050611b57565b5060405162461bcd60e51b815260206004820152600e60248201526d141bdbdb081b9bdd08199bdd5b9960921b60448201526064016105d9565b60005b600454811015611d8657826001600160a01b031660048281548110611c1a57611c1a61270b565b60009182526020909120600e90910201546001600160a01b03161415611d7457600060048281548110611c4f57611c4f61270b565b90600052602060002090600e0201600d01805480602002602001604051908101604052809291908181526020018280548015611cb457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611c96575b5050505050905060005b8151811015611d7157836001600160a01b0316828281518110611ce357611ce361270b565b60200260200101516001600160a01b03161415611d5f57818181518110611d0c57611d0c61270b565b6020026020010160006001600160a01b03168152508160048481548110611d3557611d3561270b565b90600052602060002090600e0201600d019080519060200190611d59929190611ea1565b50611d71565b80611d69816126da565b915050611cbe565b50505b80611d7e816126da565b915050611bf3565b505050565b600080826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015611dc757600080fd5b505afa158015611ddb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dff9190612243565b505050915050806402540be400611e1691906125e4565b9392505050565b828054611e299061269f565b90600052602060002090601f016020900481019282611e4b5760008555611e91565b82601f10611e6457805160ff1916838001178555611e91565b82800160010185558215611e91579182015b82811115611e91578251825591602001919060010190611e76565b50611e9d929150611ef6565b5090565b828054828255906000526020600020908101928215611e91579160200282015b82811115611e9157825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611ec1565b5b80821115611e9d5760008155600101611ef7565b80356001600160a01b0381168114611f2257600080fd5b919050565b600082601f830112611f3857600080fd5b8135602067ffffffffffffffff821115611f5457611f54612721565b8160051b611f63828201612579565b838152828101908684018388018501891015611f7e57600080fd5b600093505b85841015611fa857611f9481611f0b565b835260019390930192918401918401611f83565b50979650505050505050565b600082601f830112611fc557600080fd5b813567ffffffffffffffff811115611fdf57611fdf612721565b611ff2601f8201601f1916602001612579565b81815284602083860101111561200757600080fd5b816020850160208301376000918101602001919091529392505050565b805169ffffffffffffffffffff81168114611f2257600080fd5b60006020828403121561205057600080fd5b611e1682611f0b565b6000806040838503121561206c57600080fd5b61207583611f0b565b915061208360208401611f0b565b90509250929050565b60008060008060008060008060008060006101608c8e0312156120ae57600080fd5b67ffffffffffffffff808d3511156120c557600080fd5b6120d28e8e358f01611fb4565b9b508060208e013511156120e557600080fd5b6120f58e60208f01358f01611fb4565b9a508060408e0135111561210857600080fd5b6121188e60408f01358f01611fb4565b99508060608e0135111561212b57600080fd5b61213b8e60608f01358f01611fb4565b985060808d0135975060a08d013596508060c08e0135111561215c57600080fd5b61216c8e60c08f01358f01611fb4565b95508060e08e0135111561217f57600080fd5b61218f8e60e08f01358f01611fb4565b9450806101008e013511156121a357600080fd5b6121b48e6101008f01358f01611fb4565b9350806101208e013511156121c857600080fd5b6121d98e6101208f01358f01611fb4565b9250806101408e013511156121ed57600080fd5b506121ff8d6101408e01358e01611f27565b90509295989b509295989b9093969950565b60006020828403121561222357600080fd5b5035919050565b60006020828403121561223c57600080fd5b5051919050565b600080600080600060a0868803121561225b57600080fd5b61226486612024565b945060208601519350604086015192506060860151915061228760808701612024565b90509295509295909350565b600081518084526020808501945080840160005b838110156122cc5781516001600160a01b0316875295820195908201906001016122a7565b509495945050505050565b6000815180845260005b818110156122fd576020818501810151868301820152016122e1565b8181111561230f576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b038e1681526101a0602082015260006123486101a083018f6122d7565b828103604084015261235a818f6122d7565b9050828103606084015261236e818e6122d7565b90508281036080840152612382818d6122d7565b90508a60a08401528960c08401528860e08401528281036101008401526123a981896122d7565b90508281036101208401526123be81886122d7565b90508281036101408401526123d381876122d7565b90508281036101608401526123e881866122d7565b90508281036101808401526123fd8185612293565b9150509e9d5050505050505050505050505050565b6001600160a01b038e1681526101a0602082015260006124366101a083018f6122d7565b8281036040840152612448818f6122d7565b9050828103606084015261245c818e6122d7565b90508281036080840152612470818d6122d7565b90508a60a08401528960c08401528860e08401528761010084015282810361012084015261249e81886122d7565b90508281036101408401526124b381876122d7565b90508281036101608401526124c881866122d7565b90508281036101808401526123fd81856122d7565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561256b57888303603f19018552815180516001600160a01b031684528781015160608986018190529061253d828701826122d7565b9150508782015191508481038886015261255781836122d7565b968901969450505090860190600101612504565b509098975050505050505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156125a2576125a2612721565b604052919050565b600082198211156125bd576125bd6126f5565b500190565b6000826125df57634e487b7160e01b600052601260045260246000fd5b500490565b60006001600160ff1b038184138284138082168684048611161561260a5761260a6126f5565b600160ff1b6000871282811687830589121615612629576126296126f5565b60008712925087820587128484161615612645576126456126f5565b8785058712818416161561265b5761265b6126f5565b505050929093029392505050565b6000816000190483118215151615612683576126836126f5565b500290565b60008282101561269a5761269a6126f5565b500390565b600181811c908216806126b357607f821691505b602082108114156126d457634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156126ee576126ee6126f5565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212207facf08e8b7fff3b9d2542c81b620ca1c349be7cf49bc5a4f96d8ed01f37f7f864736f6c63430008050033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2664,
        "contract": "contracts/Equb.sol:Equb",
        "label": "numberOfPools",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2667,
        "contract": "contracts/Equb.sol:Equb",
        "label": "timeContractAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2673,
        "contract": "contracts/Equb.sol:Equb",
        "label": "timeContract",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(BokkyPooBahsDateTimeContract)1150"
      },
      {
        "astId": 2676,
        "contract": "contracts/Equb.sol:Equb",
        "label": "priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 2717,
        "contract": "contracts/Equb.sol:Equb",
        "label": "pools",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(Pool)2713_storage)dyn_storage"
      },
      {
        "astId": 2723,
        "contract": "contracts/Equb.sol:Equb",
        "label": "contributions",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Pool)2713_storage)dyn_storage": {
        "base": "t_struct(Pool)2713_storage",
        "encoding": "dynamic_array",
        "label": "struct Equb.Pool[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(BokkyPooBahsDateTimeContract)1150": {
        "encoding": "inplace",
        "label": "contract BokkyPooBahsDateTimeContract",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Pool)2713_storage": {
        "encoding": "inplace",
        "label": "struct Equb.Pool",
        "members": [
          {
            "astId": 2685,
            "contract": "contracts/Equb.sol:Equb",
            "label": "equbAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2687,
            "contract": "contracts/Equb.sol:Equb",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2689,
            "contract": "contracts/Equb.sol:Equb",
            "label": "profileUrl",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2691,
            "contract": "contracts/Equb.sol:Equb",
            "label": "email",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 2693,
            "contract": "contracts/Equb.sol:Equb",
            "label": "description",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 2695,
            "contract": "contracts/Equb.sol:Equb",
            "label": "contributionAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2697,
            "contract": "contracts/Equb.sol:Equb",
            "label": "contributionDate",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 2699,
            "contract": "contracts/Equb.sol:Equb",
            "label": "equbBalance",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 2701,
            "contract": "contracts/Equb.sol:Equb",
            "label": "contributionSkipCount",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 2703,
            "contract": "contracts/Equb.sol:Equb",
            "label": "website",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 2705,
            "contract": "contracts/Equb.sol:Equb",
            "label": "twitterUrl",
            "offset": 0,
            "slot": "10",
            "type": "t_string_storage"
          },
          {
            "astId": 2707,
            "contract": "contracts/Equb.sol:Equb",
            "label": "facebookUrl",
            "offset": 0,
            "slot": "11",
            "type": "t_string_storage"
          },
          {
            "astId": 2709,
            "contract": "contracts/Equb.sol:Equb",
            "label": "telegramUrl",
            "offset": 0,
            "slot": "12",
            "type": "t_string_storage"
          },
          {
            "astId": 2712,
            "contract": "contracts/Equb.sol:Equb",
            "label": "members",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "448"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}